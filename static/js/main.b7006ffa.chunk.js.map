{"version":3,"sources":["pages/homepage.jsx","pages/settings.jsx","pages/visualisation.jsx","pages/about.jsx","components/burgerMenu.jsx","App.js","serviceWorker.js","index.js","regionalVolumesSample/sample.js","regionalVolumesSample/doPartitionGeodesics.js","public/processing.gif","regionalVolumesSample/readUCD.js","computationWindow.js","styledDropzone.js","dataStructures.js","logo.svg"],"names":["HomePage","react_default","a","createElement","title","src","require","alt","align","SettingsPage","VisualisationPage","props","_useState","useState","height","window","innerHeight","_useState2","Object","slicedToArray","state","setState","radius","React","useRef","useEffect","handleResize","addEventListener","removeEventListener","patientsComputed","length","mesh","wireframe","geometry","THREE","i","rv","V","vertices","push","construct","toConsumableArray","Varray","E","faces","j","color","ii","dA","dP","dT","vertexColors","computeBoundingSphere","center","current","boundingSphere","material","geoWireframe","matWireframe","linewidth","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","computeFaceNormals","ref","RightVentricleMesh","web","style","width","textAlign","background","camera","position","far","react","fallback","TrackballControls","rotateSpeed","AboutPage","class","burgerMenu","BurgerMenu","react_router_dom","to","App","_this","classCallCheck","this","_super","call","patientResults","mode","addNewResult","bind","assertThisInitialized","getComputedData","k","volsED","volsES","meshED","meshES","efComputed","ef","ed","es","className","basename","pageWrapId","outerContainerId","id","react_router","exact","path","homepage","computationWindow","about","visualisation","settings","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","WeightedSample","weights","acumWeights","totalWeight","dicotomicSearch","v","i_begin","i_last","i_mid","Math","floor","random","MeshSampler","coordinates","triangles","mean","Vector3","addScaledVector","absoluteVolumes","signedVolumes","totalVol","m","Matrix3","t","set","x","y","z","vol","determinant","abs","console","log","sampler","getSample","r1","r2","r3","r4","R","p","point","sign","__webpack_require__","d","__webpack_exports__","doPartitionGeodesics","copyPartition","computeRegionalVolumeSampling","debug","geodesics","RBF","minimum","v1","v2","n","min","mapToArray","arr","polygonSoup","pointsTricuspid","pointsPulmonary","dApex","dTricuspid","dPulmonary","res","partition","newPartition","interpolationMethod","transpose","map","nsamples","undefined","rbfAllSegments","cA","cP","cT","points","max","boundingBox","octtree","PointOctree","insert","daa","dpp","dtt","iPoint","findNearestPoint","data","module","exports","volume","readUCD","math_ds__WEBPACK_IMPORTED_MODULE_0__","parseUCD","text","Points","Cells","lines","split","firstLine","nPoints","parseInt","nCells","nLine","line","parseFloat","blob","Promise","resolve","reject","fr","FileReader","onload","result","readAsText","readFile","ComputationWindow","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","patientsToCompute","MeshesList","numberToCompute","numberComputed","addFiles","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","sendPatientFile","sendAllPatients","generateAndDownload","acceptedFiles","patients","forEach","addNewFile","_this2","get","keys","apply","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","aux","name","pop","global","fullCycleFiles","all","results","iMinVol","newResult","ED","ES","partitionED","partitionES","removeFile","myHeaders","Headers","formData","FormData","append","fetch","method","headers","body","response","json","outflowEDV","inletEDV","apicalEDV","outflowEF","inletEF","apicalEF","_this3","csvContent","items","columnNames","join","item","index","rowInteger","Array","Number","toFixed","row","encodedUri","encodeURI","link","setAttribute","appendChild","click","percentage","react__WEBPACK_IMPORTED_MODULE_6___default","_styledDropzone__WEBPACK_IMPORTED_MODULE_8__","onDrop","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","variant","onClick","disabled","react_circular_progressbar__WEBPACK_IMPORTED_MODULE_9__","value","maxValue","minValue","concat","pId","key","Container","styled","div","_templateObject","isDragAccept","isDragReject","isDragActive","getColor","StyledDropzone","useCallback","_useDropzone","useDropzone","accept","getRootProps","getInputProps","react__WEBPACK_IMPORTED_MODULE_1___default","Dictionary","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","callbackIfKeyNotFound","arguments","assign","Error","code","_Dictionary","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_1__","_Users_gbernardino_RVparcellation_react_frontend_docker_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_2__","file","nameSplit","slice","time","every"],"mappings":"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","file":"static/js/main.b7006ffa.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst HomePage = () => {\n    return (\n      <div>\n        <h2>Page under construction --- our ingeneous engineers are working on it</h2>\n        <img  title=\"Our oompa loompa is processing. Please wait.\" src={require('../public/processing.gif')} alt=\"loading...\"  align=\"middle\" />\n        </div>\n    )\n  }\n  \n  export default HomePage;","import React from 'react';\n\n\nfunction SettingsPage() {\n    return (\n        <div>\n            <h2>Page under construction --- our ingeneous engineers are working on it</h2>\n            <img title=\"Our oompa loompa is processing. Please wait.\" src={require('../public/processing.gif')} alt=\"loading...\" align=\"middle\" />\n            </div>\n    );\n}\n\nexport default SettingsPage;","// see for inspiration https://codesandbox.io/s/r3f-contact-shadow-h5xcw?file=/src/index.js\n// three js fiber (react version of three js)\nimport ReactDOM from 'react-dom'\nimport React, { Suspense , useState, useRef, useEffect } from 'react'\nimport { Canvas, MeshNormalMaterial } from 'react-three-fiber'\nimport { OrbitControls, TrackballControls} from 'drei'\nimport * as THREE from \"three\";\n\n\nfunction RightVentricleMesh(props) {\n  //console.log(props.rv)\n  \n  //const vertices = useMemo(() => props.rv[7].V.map(v => new THREE.Vector3(v.x, v.y, v.z)), [])\n  //const faces = useMemo(() => props.rv[7].E.map(f => new THREE.Face3(...f)), [])\n  const mesh = useRef()\n  const wireframe = useRef()\n\n  const geometry = new THREE.Geometry();\n  for (let i = 0; i < props.rv[7].V.length; i++) {\n    geometry.vertices.push(new THREE.Vector3(...props.rv[7].Varray[i]))\n  }\n  for (let i = 0; i < props.rv[7].E.length; i++) {\n    geometry.faces.push(new THREE.Face3(...props.rv[7].E[i]))\n\n    // Add coloring according to closest point\n    for (let j = 0; j < 3; j++){\n      var color;\n      var ii = props.rv[7].E[i][j]\n      if (props.rv[7].dA[ii] < props.rv[7].dP[ii] && props.rv[7].dA[ii] < props.rv[7].dT[ii]) {\n        color = new THREE.Color(0xf8521)\n      }\n      else if ( props.rv[7].dT[ii] < props.rv[7].dP[ii]) {\n        color = new THREE.Color(0x0f4285)\n      }\n      else{\n        color = new THREE.Color(0x85180f)\n      }\n  \n      geometry.faces[i].vertexColors[j] = color;\n  \n    }\n  }\n\n  geometry.computeBoundingSphere();  \n  geometry.center();\n    \n  props.radius.current.radius = geometry.boundingSphere.radius;\n  let material = new THREE.MeshStandardMaterial({vertexColors:THREE.VertexColors}) \n\n// wireframe\n  var geoWireframe = new THREE.WireframeGeometry( geometry ); // or WireframeGeometry\n  var matWireframe = new THREE.LineBasicMaterial( { color: 0x0, linewidth: 5, polygonOffset : true, polygonOffsetFactor: 2, polygonOffsetUnits: 1} );\n\n  geometry.computeFaceNormals();\n\n  return (\n    <group>\n       <mesh ref={mesh} geometry={geometry} material={material}/ >\n       <lineSegments ref={wireframe} geometry={geoWireframe} material={matWireframe}/ >\n\n    </group>\n  )\n}\n\n\nconst VisualisationPage = (props ) => {\n  //Add a selector of which mesh\n  const [state, setState] = useState({height: window.innerHeight *0.8})\n  let radius = React.useRef([])\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setState({height: window.innerHeight *0.8})\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n\n  }, []); // Empty array ensures that effect is only run on mount\n\n\n\n  if (props.patientsComputed.length === 0){\n    return (<div>You need to compute some results before being able to display.</div>);\n  }\n  else {\n    let mesh= RightVentricleMesh({rv: props.patientsComputed[0], radius: radius});\n    return (\n      <div align=\"middle\">\n      <Canvas   style={{height: state.height, width:'95%', textAlign:'center', background: '#D3D3D3'}} camera={{ position: [0, 0, -3 * radius.current.radius], far: 5 * radius.current.radius}}>\n        <ambientLight />\n        <Suspense fallback={null}>\n        {mesh}\n        </Suspense >\n        <TrackballControls  rotateSpeed={4} />\n      </Canvas>\n      </div>\n    )\n    }\n  }\n  \n  export default VisualisationPage;","import React from 'react';\n\n\nconst AboutPage = () => {\n    return (\n      <div>\n        <h2>Page under construction --- our ingeneous engineers are working on it</h2>\n        <img  title=\"Our oompa loompa is processing. Please wait.\" src={require('../public/processing.gif')} alt=\"loading...\" class=\"center\"/>\n        </div>\n    )\n  }\n  \n  export default AboutPage;","import React from \"react\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nexport default props => {\n  return (\n    // Pass on our props\n    <Menu {...props}>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/computation\">Computation</Link>\n        <Link to=\"/visualisation\">Visualisation</Link>\n        <Link to=\"/settings\">Settings</Link>\n        <Link to=\"/about\">About</Link>\n\n\n    </Menu>\n  );\n};\n\n/*\n      <a className=\"menu-item\" href=\"/\">\n        Home\n      </a>\n\n      <a className=\"menu-item\" href=\"/computation\">\n        Computation\n      </a>\n\n      <a className=\"menu-item\" href=\"/visualisation\">\n        Visualisation\n      </a>\n\n      <a className=\"menu-item\" href=\"/settings\">\n        Settings\n      </a>\n\n      <a className=\"menu-item\" href=\"/about\">\n        About\n      </a>\n      */","import React from 'react';\nimport logo from './logo.svg';\nimport ComputationWindow from './computationWindow.js';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport HomePage from './pages/homepage'\nimport SettingsPage from './pages/settings'\nimport VisualisationPage from './pages/visualisation'\nimport AboutPage from './pages/about.jsx'\nimport './styles/index.css';\nimport SideBar from \"./components/burgerMenu\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {patientResults: [],  mode : 'local'};\n\n    this.addNewResult = this.addNewResult.bind(this);\n    this.getComputedData = this.getComputedData.bind(this);   \n  }\n\n  addNewResult(k, volsED, volsES, meshED, meshES, efComputed){\n    var ef;\n    if (efComputed){\n      ef = (ed, es) => es;\n\n    }\n    else{\n       ef = (ed, es) => 100 * (ed - es)/ed;\n    }\n    let patientResults = this.state.patientResults\n    patientResults.push([k, volsED[0], volsED[1], volsED[2], ef(volsED[0], volsES[0]), ef(volsED[1], volsES[1]), ef(volsED[2], volsES[2]), meshED, meshES])\n    this.setState({patientResults : patientResults})\n  }\n\n  getComputedData(){\n    return this.state.patientResults;\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Right ventricular parcellator.\n        </header>\n        <body>\n        <Router  basename=\"/\">\n        <SideBar pageWrapId={\"page-wrap\"} outerContainerId={\"App\"} />\n\n        <div id=\"page-wrap\">\n            <Switch>\n              <Route exact path={[\"/\", \"/home\"]}> \n                <HomePage />\n              </Route>\n              <Route path=\"/computation\">\n                    <ComputationWindow addNewResult = {this.addNewResult} patientsComputed = {this.state.patientResults} />\n              </Route>\n              <Route path=\"/about\">\n                <AboutPage />\n              </Route>\n              <Route path=\"/visualisation\">\n                <VisualisationPage  patientsComputed = {this.state.patientResults} />\n              </Route>\n              <Route path=\"/settings\">\n                <SettingsPage />\n              </Route>\n            </Switch>\n        </div>\n        </Router>\n       \n        </body>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n/*<CircularProgressbar\npercentage={percentage}\ntext={`${percentage.toFixed(2)}%`}\n/>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.css';\n\n//import './styles/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Vector3, Matrix3} from 'math-ds'\n\nfunction dicotomicSearch(k, v, i_begin, i_last,) {\n    let i_mid = Math.floor((i_begin + i_last ) /2);\n    if (v[i_begin] <= k && ((i_begin + 1== v.length)  ||  v[i_begin +1] >= k))\n    {\n        return i_begin\n    }\n    else if (v[i_mid] < k) {\n        return dicotomicSearch(k, v, i_mid, i_last)\n    }\n    else  {\n        return dicotomicSearch(k, v, i_begin, i_mid)\n\n    }\n}\n\nclass WeightedSample {\n    constructor(weights) {\n        this.acumWeights = [];\n        this.totalWeight = 0\n        for (let i = 0; i < weights.length; i++) {\n            this.acumWeights.push(this.totalWeight);\n            this.totalWeight += weights[i];\n        }\n    }\n\n    getSample() {\n        let r = Math.random() * this.totalWeight;\n        return dicotomicSearch(r, this.acumWeights, 0, this.acumWeights.length)\n    }\n};\n\n\n\nclass MeshSampler {\n    constructor(coordinates, triangles) {\n        this.triangles = triangles;\n        this.coordinates = coordinates\n        // COMPUTE mean\n        this.mean = new Vector3(0,0,0);\n        for (let i = 0; i < this.coordinates.length; i++) {\n            this.mean.addScaledVector(this.coordinates[i], 1 /this.coordinates.length)\n        }\n\n        this.absoluteVolumes = [];\n        this.signedVolumes = [];\n        let totalVol = 0;\n        for (let i = 0; i < this.triangles.length; i++) {\n            let m = new Matrix3();\n            let t = this.triangles[i]\n            m.set(\n                this.coordinates[t[0]].x - this.mean.x, this.coordinates[t[0]].y - this.mean.y, this.coordinates[t[0]].z - this.mean.z, \n                this.coordinates[t[1]].x - this.mean.x, this.coordinates[t[1]].y - this.mean.y, this.coordinates[t[1]].z - this.mean.z, \n                this.coordinates[t[2]].x - this.mean.x, this.coordinates[t[2]].y - this.mean.y, this.coordinates[t[2]].z- this.mean.z)\n            let vol = m.determinant()/6;\n            totalVol += vol;\n            this.absoluteVolumes.push(Math.abs(vol));\n            this.signedVolumes.push(vol);\n            this.totalVol = totalVol;\n        }\n        console.log(totalVol)\n        this.sampler = new WeightedSample(this.absoluteVolumes)\n    }\n    getSample(){ \n        let i = this.sampler.getSample();\n        let r1 = - Math.log(Math.random());\n        let r2 = - Math.log(Math.random());\n        let r3 = - Math.log(Math.random());\n        let r4 = - Math.log(Math.random());\n        let R = r1 + r2 + r3 + r4;\n        r1 /= R;\n        r2 /= R;\n        r3 /= R;\n        r4 /= R;\n        var p = new Vector3(0,0,0);\n        let t = this.triangles[i]\n        p.addScaledVector(this.coordinates[t[0]] , r1).addScaledVector(this.coordinates[t[1]], r2).addScaledVector(this.coordinates[t[2]], r3).addScaledVector(this.mean, r4)\n        return {point :p , sign : Math.sign(this.signedVolumes[i])}\n    }\n}\n\nexport default MeshSampler;","import { Vector3 } from 'math-ds';\nimport MeshSampler from './sample'\nimport { PointOctree } from \"sparse-octree\";\nlet debug = false;\nlet geodesics = require('mesh-geodesic');\nlet RBF = require(\"rbf\");\n\nfunction minimum(v1, v2, n){\n    let v =[];\n    for(let i = 0; i < n; i++){\n        v.push(Math.min(v1[i], v2[i]))\n    }\n    return v;\n}\nfunction mapToArray(v, n){\n    let arr = [];\n    for (let i = 0; i < n; i++){\n        arr.push(v[i])\n    }\n    return arr\n}\n\nexport function doPartitionGeodesics(polygonSoup){\n    let E = polygonSoup[1];\n    let V = polygonSoup[0];\n    let Varray = [];\n    for (let i = 0; i < V.length; i++) {\n        Varray.push([V[i].x, V[i].y, V[i].z])\n    }\n\n    let d = geodesics(E, Varray,  0);\n\n    let apexId = 906;\n    let pointsTricuspid = [388, 389, 392, 393, 144, 540, 145, 538, 539, 422, 423, 38, 541, 49, 55, 328, 329, 332, 333, 87, 94, 100, 101, 103, 104, 105, 122, 123, 126, 127];\n    let pointsPulmonary = [410, 411, 409, 408, 53, 64, 65, 66, 67, 68, 69, 83, 476, 477, 92, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 479];\n    let dApex = geodesics(E, Varray,  apexId);\n    let dTricuspid = geodesics(E, Varray,  pointsTricuspid[0]);\n    for (let i = 1; i < pointsTricuspid.length; i++) {\n        dTricuspid = minimum(dTricuspid, geodesics(E, Varray,  pointsTricuspid[i]), V.length)\n    }\n\n    let dPulmonary = geodesics(E, Varray,  pointsPulmonary[0]);\n    for (let i = 1; i < pointsPulmonary.length; i++) {\n        dPulmonary = minimum(dPulmonary, geodesics(E, Varray,  pointsPulmonary[i]), V.length)\n    }\n    let res =  {};\n    res.E = E;\n    res.V = V;\n    res.Varray = Varray;\n    res.dA = mapToArray(dApex, V.length);\n    res.dP = mapToArray(dPulmonary, V.length);\n    res.dT = mapToArray(dTricuspid, V.length);\n    return res;\n}\nexport function copyPartition(polygonSoup, partition){\n    let newPartition = {};\n    newPartition.E = polygonSoup[1];\n    newPartition.V = polygonSoup[0];\n    let Varray = [];\n    for (let i = 0; i < newPartition.V.length; i++) {\n        Varray.push([newPartition.V[i].x, newPartition.V[i].y, newPartition.V[i].z])\n    }\n    newPartition.Varray = Varray;\n    newPartition.dA = partition.dA;\n    newPartition.dP = partition.dP;\n    newPartition.dT = partition.dT;\n    return newPartition;\n}\n\nfunction boundingBox(points) {\n    var min = new Vector3(1000,10000,1000);\n    var max = new Vector3(-1000,-10000,-1000);\n    for (let i = 0; i < points.length; i++) {\n        if (min.x > points[i].x){\n            min.x = points[i].x\n        }\n        if (max.x < points[i].x){\n            max.x = points[i].x\n        }\n\n        if (min.y > points[i].y){\n            min.y = points[i].y\n        }\n        if (max.y < points[i].y){\n            max.y = points[i].y\n        }\n\n        if (min.z > points[i].z){\n            min.z = points[i].z\n        }\n        if (max.z < points[i].z){\n            max.z = points[i].z\n        }\n    }\n    return [min, max]\n}\n\nlet interpolationMethod = 'rbf';\nlet transpose = m => m[0].map((x,i) => m.map(x => x[i])) // https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\nexport function computeRegionalVolumeSampling(mesh){\n    let sampler = new MeshSampler(mesh.V, mesh.E)\n    var nsamples;\n    if (mesh.nsamples === undefined) {\n        nsamples = 1\n    }\n    else {\n        nsamples = mesh.nsamples\n    }\n    let cA = 0;\n    let cP = 0;\n    let cT = 0;\n    let m = boundingBox(mesh.V);\n    var octtree = new PointOctree(m[0], m[1]);\n    for (let i = 0; i < mesh.V.length; i++) {\n        octtree.insert(mesh.V[i], i);\n    }\n\n    //var rbfA, rbfT, rbfP;\n    var rbfAllSegments;\n    if (interpolationMethod === 'rbf') {\n        rbfAllSegments = RBF(mesh.Varray, transpose([mesh.dA, mesh.dP, mesh.dT]), 'linear');\n    }\n    for (let i = 0; i < nsamples; i ++)\n    {\n        let p = sampler.getSample();\n\n        // Get the counts  --- we can actually precompute the partition...\n        var daa, dpp, dtt;\n        if (interpolationMethod === 'nearest') {\n            let res = octtree.findNearestPoint(p.point);\n            let iPoint = res.data;\n            daa = mesh.dA[iPoint];\n            dpp = mesh.dP[iPoint];\n            dtt = mesh.dT[iPoint];\n        }\n        else {\n\n            let d = rbfAllSegments([p.point.x, p.point.y, p.point.z])\n            daa = d[0];\n            dpp = d[1];\n            dtt = d[2];\n    \n            if (debug && i % 100 === 0){\n                console.log(daa, dpp, dtt)\n            }\n        }\n\n        if (daa < dtt && daa < dpp){\n            cA += p.sign\n        }\n        else if (dtt < dpp){ \n            cT += p.sign;\n        } \n        else {\n            cP += p.sign;\n        }\n    }\n    let totalVol = sampler.totalVol;\n    let pA = cA/(cA + cP + cT) * totalVol;\n    let pP = cP/(cA + cP + cT) * totalVol;\n    let pT = cT/(cA + cP + cT) * totalVol;\n    return[pP, pT, pA];\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/processing.529e8cb8.gif\";","import {Vector3, Matrix3} from 'math-ds'\n\n\nfunction parseUCD(text) {\n    var Points = [];\n    var Cells = [];\n\n    var lines = text.split(/[\\r\\n]+/g); // tolerate both Windows and Unix linebreaks\n    let firstLine = lines[0].split(/ +/)\n    let nPoints = parseInt(firstLine[0]);\n    let nCells = parseInt(firstLine[1])\n    var nLine = 1;\n    for (let i = 0; i < nPoints; i ++) {\n        let line = lines[nLine].split(' ')\n        Points.push(new Vector3(parseFloat(line[1]), parseFloat(line[2]), parseFloat(line[3])));\n        nLine++;\n    }\n    for (let i = 0; i < nCells; i ++) {\n        let line = lines[nLine].split(/ +/)\n        if (line[2] != 'tri') {\n            console.log(lines[nLine], nLine, firstLine)\n            throw('UCD has non-triangle face')\n        }\n        Cells.push([ parseInt(line[3]), parseInt(line[4]), parseInt(line[5])])\n\n        nLine++\n    }\n    return [Points, Cells]\n}\n\nexport function volume(coordinates, triangles) {\n  // COMPUTE mean\n  let mean = new Vector3(0,0,0);\n  for (let i = 0; i < coordinates.length; i++) {\n      mean.addScaledVector(coordinates[i], 1 /coordinates.length)\n  }\n\n  let totalVol = 0;\n  for (let i = 0; i < triangles.length; i++) {\n      let m = new Matrix3();\n      let t = triangles[i]\n      m.set(\n          coordinates[t[0]].x - mean.x, coordinates[t[0]].y - mean.y, coordinates[t[0]].z - mean.z, \n          coordinates[t[1]].x - mean.x, coordinates[t[1]].y - mean.y, coordinates[t[1]].z - mean.z, \n          coordinates[t[2]].x - mean.x, coordinates[t[2]].y - mean.y, coordinates[t[2]].z - mean.z)\n      let vol = m.determinant()/6;\n      totalVol += vol;\n  }\n  return totalVol;\n}\n\nexport function readUCD(blob) {\n    function readFile(blob){\n        return new Promise((resolve, reject) => {\n          var fr = new FileReader();  \n          fr.onload = () => {\n            resolve(fr.result )\n          };\n          fr.readAsText(blob);\n        });\n      }\n      return readFile(blob).then(parseUCD)\n}\n\n","import React from 'react';\nimport  { Button} from 'react-bootstrap';\nimport StyledDropzone from './styledDropzone';\nimport {CircularProgressbar } from 'react-circular-progressbar';\nimport {volume, readUCD} from './regionalVolumesSample/readUCD';\nimport {doPartitionGeodesics, computeRegionalVolumeSampling, copyPartition} from './regionalVolumesSample/doPartitionGeodesics';\nimport {MeshesList} from './dataStructures';\nimport \"./styles/index.css\"\n\n  \nclass ComputationWindow extends React.Component {\n    constructor(props) {\n      super(props);\n    \n      this.state = {patientsToCompute : new MeshesList(), numberToCompute : 1, numberComputed: 1,  mode : 'local'};\n\n      this.addFiles = this.addFiles.bind(this);\n      this.sendPatientFile = this.sendPatientFile.bind(this);   \n      this.sendAllPatients = this.sendAllPatients.bind(this);   \n      this.generateAndDownload = this.generateAndDownload.bind(this);      \n    }\n   \n    addFiles(acceptedFiles) {\n      /*\n      Add files to patients.\n      TODO: Do not add if it is already computed \n      */\n      let patients = this.state.patientsToCompute;\n      console.log(acceptedFiles);\n      acceptedFiles.forEach(blob => patients.addNewFile(blob));\n      this.setState({ patients: patients});\n    }\n\n    sendPatientFile(k){\n      /*\n      WARNING: not sure how this handles concurent accesses... better work one by one.\n      */\n      if (this.state.patientsToCompute.get(k).keys().length !== (1 + Math.max(...this.state.patientsToCompute.get(k).keys()))) {\n        this.setState({numberComputed: this.state.numberComputed + 1})\n        return\n      }\n      var aux =  this.state.patientsToCompute.get(k).get(0).name.split('.').pop();\n\n      if (this.state.mode === 'docker' ) {\n        console.log('Sending new patient')\n        var myHeaders = new Headers();\n        var formData = new FormData();\n        formData.append('pId', k)\n        formData.append('format', aux)\n        this.state.patientsToCompute.get(k).keys().forEach(t =>  formData.append(t, this.state.patientsToCompute.get(k).get(t) ));\n        var myData = { method: 'POST',\n                      headers: myHeaders,\n                      mode: 'cors',\n                      body: formData\n                      };\n  \n        fetch('http://localhost:5000/computePartitionSingleIndividual', myData)\n        .then(function(response) {\n          response.json().then(function(data) {\n            let patientsToCompute = global.state.patientsToCompute\n            patientsToCompute.removeFile(k)\n            global.setState({patientsToCompute : patientsToCompute, numberComputed: global.state.numberComputed + 1})\n            global.props.addNewResult(k, [data.outflowEDV, data.inletEDV, data.apicalEDV], [data.outflowEF, data.inletEF, data.apicalEF], undefined, undefined, true)\n            });\n    \n        });\n      }\n      else { \n          let global = this;\n          var fullCycleFiles = [];\n          this.state.patientsToCompute.get(k).keys().forEach(t =>  fullCycleFiles.push(this.state.patientsToCompute.get(k).get(t) )); // This can prob be simplified...\n          // read the meshes\n          //console.log(fullCycleFiles[0])\n          Promise.all(fullCycleFiles.map(readUCD)).then(\n            function(results) {\n              var iMinVol = -1;\n              var totalVol = 1e20;\n              for (let i = 1; i < results.length; i++ ) {\n                let v = volume(results[i][0], results[i][1]);\n                if (totalVol > v) {\n                    iMinVol = i;\n                    totalVol = v;\n                }\n              }\n              console.log('iMin', iMinVol)\n              let newResult = {};\n              newResult.ED = results[0];\n              newResult.ES = results[iMinVol];\n              return newResult;\n            }).then(\n              function(results){\n                let partitionED = doPartitionGeodesics(results.ED);\n                let partitionES = copyPartition(results.ES, partitionED);\n                let volsED = computeRegionalVolumeSampling(partitionED);\n                let volsES = computeRegionalVolumeSampling(partitionES);\n  \n                // TODO: Same code as in the server approach for computing: Do a function\n                global.props.addNewResult(k, volsED, volsES, partitionED, partitionES, false)\n                let patientsToCompute = global.state.patientsToCompute\n                patientsToCompute.removeFile(k)\n                global.setState({patientsToCompute : patientsToCompute, numberComputed: global.state.numberComputed + 1})\n              }\n            )        \n          return\n  \n      }\n    }\n    \n    sendAllPatients(){\n      //TODO: Check that it is correct\n        this.setState({numberToCompute: this.state.patientsToCompute.length(), numberComputed : 0})\n        this.state.patientsToCompute.keys().forEach(k => this.sendPatientFile(k))\n    }\n  \n  \n    generateAndDownload(){\n      /*\n      Generates a csv file with all the processed measurements, and downloads it\n      */\n      var csvContent =\"data:text/csv;charset=utf-8,\";\n      let items = ['pID', 'outflowEDV', 'inletEDV', 'apicalEDV', 'outflowEF', 'inletEF', 'apicalEF'];\n      var columnNames = items.join(\";\");\n      csvContent += columnNames + \"\\r\\n\";\n      this.props.patientsComputed.forEach(function (item, index) {\n        var rowInteger = new Array(items.length)\n        for (var i = 1; i < items.length; i++) {\n          rowInteger[i] = Number(item[i]).toFixed(3)\n        }\n        let row = rowInteger.join(\";\");\n        csvContent += row + \"\\r\\n\";\n      });\n  \n  \n      var encodedUri = encodeURI(csvContent);\n      var link = document.createElement(\"a\");\n      link.setAttribute(\"href\", encodedUri);\n      link.setAttribute(\"download\", \"regionalVolumes.csv\");\n      document.body.appendChild(link); // Required for FF\n  \n      link.click(); \n    }\n\n    render () {\n      let patients = this.state.patientsToCompute;\n      var patientsComputed = this.props.patientsComputed;\n      let percentage = 100 * this.state.numberComputed / this.state.numberToCompute;\n      return (\n        <div className=\"Computation\">\n            <aside>\n            {this.state.numberComputed === this.state.numberToCompute ?\n              ( <div> \n                <StyledDropzone onDrop={this.addFiles } />\n                <Button variant=\"dark\" onClick={this.sendAllPatients} class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"> \n                Parcellate!  </Button>\n                <Button variant=\"dark\" disabled= {this.state.numberComputed !== this.state.numberToCompute} onClick={this.generateAndDownload} class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                   Download CSV</Button>\n\n                </div>\n              )\n              :\n              (\n                <div class = 'container'> \n                   <CircularProgressbar\n                    value={percentage}\n                    maxValue={100}\n                    minValue={0}\n                    text={`${this.state.numberComputed}/${this.state.numberToCompute}`}\n                    />\n                </div>\n              )\n            }\n            <div class=\"row\">\n              <div class=\"column\">\n  \n                        <h4>Patients to compute </h4>\n                        <ul>{patients.keys().map(pId => (<li key={pId}>\n                          <font color={  patients.get(pId).keys().length === (1 + Math.max(...patients.get(pId).keys())) ? \"black\" : \"red\"}>\n                            {pId}  -  { patients.get(pId).keys().length} / {1 + Math.max(...patients.get(pId).keys())}\n                          </font> \n                          </li> ) \n                          )}\n                        </ul>\n                  </div>\n              <div class=\"column\">\n              <h4>Patients computed </h4>\n              <ul>{patientsComputed.map(pId => (<li key={pId[0]}>\n                          <font color=\"Black\">\n                            {pId[0]}  \n                          </font> \n                          </li> ) \n                          )}\n                        </ul>\n                </div>\n          </div> \n            {/* <Button variant=\"primary\"  onClick={this.testPost}> Add dummy result </Button> */}\n  \n            </aside>\n        </div>\n      );\n    }\n  \n  }\n  export default ComputationWindow;","import React, {useCallback} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst getColor = (props) => {\n  if (props.isDragAccept) {\n      return '#00e676';\n  }\n  if (props.isDragReject) {\n      return '#ff1744';\n  }\n  if (props.isDragActive) {\n      return '#2196f3';\n  }\n  return '#eeeeee';\n}\n\n\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  outline: none;\n  transition: border .24s ease-in-out;\n`;\n\nfunction StyledDropzone(props) {\n  const onDrop = useCallback(props.onDrop, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({onDrop : onDrop,\n                accept: '.vtk, .ucd'\n              });\n  \n  return (\n    <div className=\"container\">\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some VTK files here, or click to select files</p>\n      </Container>\n    </div>\n  );\n}\n\nexport default StyledDropzone ;","export class Dictionary{\n    constructor() {\n      this.data = {};\n    }\n    get(k, callbackIfKeyNotFound = null) {\n      if (this.data[k] === undefined && callbackIfKeyNotFound === null)  {\n        this.set(k, callbackIfKeyNotFound())\n        return this.data[k]\n      }\n      else if (this.data[k] === undefined) { \n        throw  Object.assign(\n          new Error('${k} not in dictionary'),\n          { code: 400 }\n       );\n      }\n      else {\n        return this.data[k]\n      }\n    }\n  \n    set(k, v){\n      this.data[k]= v;\n    }\n    keys() {\n      return Object.keys(this.data)\n    }\n    length() {\n      return this.keys().length\n    }\n  }\n  \n  export class MeshesList extends Dictionary {\n    //Class representing all meshes of all patients (saved as BLOBS of a single patient. Relies on the correct index, and the correct format)\n  \n  \n    addNewFile(file) {\n  \n      //TODO: check name is correct.\n      //END TODO\n  \n      let nameSplit = file.name.split('_');\n      let pId = nameSplit.slice(0, -1).join('_');\n      let time = parseInt(nameSplit[nameSplit.length - 1].split('.')[0]);\n      if (! (pId in this.data) ) {\n        this.set(pId, new Dictionary());\n      }\n  \n  \n      let patient = this.get(pId);\n      patient.set(time, file);\n    }\n  \n    removeFile(pId) {\n      console.log('Removing', pId)\n      console.log(this)\n      delete this.data[pId]\n    }\n  \n    isOK() {\n      //Returns OK if the files is complete: ie, if there are all the frames from 0 to max\n      return  this.keys().every(k => this.get(k).keys() === Math.max(...this.get(k).keys()) );\n      }\n  }\n  ","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}